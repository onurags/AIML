import numpy as np
 def and_gate(x1, x2):
    weights = np.array([1, 1])
    bias = -1.5
    x = np.array([x1, x2])
    weighted_sum = np.dot(x, weights) + bias
    output = 1 if weighted_sum >= 0 else 0
    return output
 def nand_gate(x1, x2):
    weights = np.array([-1, -1])
    bias = 1.5
    x = np.array([x1, x2])
    weighted_sum = np.dot(x, weights) + bias
    output = 1 if weighted_sum >= 0 else 0
    return output
 def test_gates():
    print("AND Gate:")
    for x1 in [0, 1]:
        for x2 in [0, 1]:
            print(f"{x1} AND {x2} = {and_gate(x1, x2)}")
    print("\nNAND Gate:")
    for x1 in [0, 1]:
        for x2 in [0, 1]:
            print(f"{x1} NAND {x2} = {nand_gate(x1, x2)}")
 if __name__ == "__main__":
    test_gates()
